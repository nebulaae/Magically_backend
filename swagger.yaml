openapi: "3.0.0"
info:
  title: "Volshebny API"
  version: "1.0.0"
  description: "Документация по API сервиса Volshebny"
servers:
  - url: "http://localhost:5000/api/v1/"
    description: "Локальный dev сервер (в проекте используется /api/v1/)."
  

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
      description: "JWT токен в cookie (используется в кодовой базе)."
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT токен в Authorization: Bearer <token>"
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        fullname:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        bio:
          type: string
          nullable: true
        avatar:
          type: string
          nullable: true
        interests:
          type: array
          items:
            type: string
        tokens:
          type: integer
        role:
          type: string
          enum: ["user","admin"]
        isBlocked:
          type: boolean
        verified:
          type: boolean
    Publication:
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
        imageUrl:
          type: string
          nullable: true
        videoUrl:
          type: string
          nullable: true
        likeCount:
          type: integer
        commentCount:
          type: integer
        author:
          $ref: "#/components/schemas/User"
        createdAt:
          type: string
          format: date-time
    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        text:
          type: string
        userId:
          type: string
          format: uuid
        publicationId:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
          nullable: true
        likeCount:
          type: integer
        createdAt:
          type: string
          format: date-time
    GalleryItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        prompt:
          type: string
        imageUrl:
          type: string
        generationType:
          type: string
        createdAt:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        message:
          type: string
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        status_code:
          type: integer
        message:
          type: string
        data:
          nullable: true

security:
  - cookieAuth: []
  - bearerAuth: []

tags:
  - name: Auth
    description: "Аутентификация и сессии"
  - name: Users
    description: "Профили, подписки"
  - name: Publications
    description: "Посты, лайки"
  - name: Comments
    description: "Комментарии к публикациям"
  - name: Gallery
    description: "Пользовательская галерея сгенерированных медиа"
  - name: AI Generation
    description: "Fal/GPT/Kling/Higgsfield/Replicate endpoints"
  - name: Admin
    description: "Админ-функции"

paths:
  # AUTH
  /auth/register-step-1:
    post:
      tags: [Auth]
      summary: "Регистрация — шаг 1: отправка OTP на email"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["email"]
              properties:
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: "OTP отправлен"
        "400":
          description: "Email уже используется/верифицирован"
  /auth/register-step-2:
    post:
      tags: [Auth]
      summary: "Регистрация — шаг 2: верификация OTP"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["email","otp"]
              properties:
                email: { type: string, format: email }
                otp: { type: string }
      responses:
        "200": { description: "Email подтверждён" }
        "400": { description: "Неверный OTP" }
  /auth/register-step-3:
    post:
      tags: [Auth]
      summary: "Регистрация — шаг 3: создание аккаунта"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["email","fullname","username","password"]
              properties:
                email: { type: string, format: email }
                fullname: { type: string }
                username: { type: string }
                password: { type: string }
      responses:
        "201": { description: "Пользователь создан" }
        "400": { description: "Ошибка валидации" }

  /auth/login:
    post:
      tags: [Auth]
      summary: "Вход — возвращает JWT (cookie или Authorization)"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: ["usernameOrEmail","password"]
              properties:
                usernameOrEmail: { type: string }
                password: { type: string }
      responses:
        "200":
          description: "Успешный вход — cookie 'token' установлен + ответ с user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
        "400": { description: "Неверные учетные данные" }

  /auth/logout:
    post:
      tags: [Auth]
      summary: "Выход — очищает cookie с токеном"
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        "200": { description: "Выход успешен" }

  /auth/me:
    get:
      tags: [Auth]
      summary: "Информация о текущем пользователе"
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        "200":
          description: "Данные пользователя"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401": { description: "Требуется аутентификация" }

  /auth/forgot-password:
    post:
      tags: [Auth]
      summary: "Запрос на сброс пароля (отправляет email со ссылкой/токеном)"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
      responses:
        "200": { description: "Письмо отправлено (если email существует и верифицирован)" }

  # USERS
  /users/search/users:
    get:
      tags: [Users]
      summary: "Поиск пользователей"
      parameters:
        - in: query
          name: query
          required: true
          schema: { type: string }
      responses:
        "200": { description: "Список найденных пользователей", content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/User' } } } } }
        "400": { description: "Нужен поисковый запрос" }

  /users/me/profile:
    get:
      tags: [Users]
      summary: "Получить профиль текущего пользователя"
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        "200": { description: "Профиль пользователя", content: { application/json: { schema: { $ref: "#/components/schemas/User" } } } }
    put:
      tags: [Users]
      summary: "Обновить профиль текущего пользователя"
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fullname: { type: string }
                bio: { type: string }
                interests: { type: array, items: { type: string } }
      responses:
        "200": { description: "Профиль обновлён" }

  /users/me/avatar:
    put:
      tags: [Users]
      summary: "Обновить аватар (multipart/form-data)"
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        "200": { description: "Аватар обновлён" }

  /users/{username}:
    get:
      tags: [Users]
      summary: "Получить публичный профиль по username"
      parameters:
        - in: path
          name: username
          required: true
          schema: { type: string }
      responses:
        "200": { description: "Публичный профиль", content: { application/json: { schema: { $ref: "#/components/schemas/User" } } } }
        "404": { description: "Пользователь не найден" }

  /users/{userId}/subscribe:
    post:
      tags: [Users]
      summary: "Подписаться на пользователя (follow)"
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200": { description: "Подписка успешна" }
        "409": { description: "Уже подписаны" }

  /users/{userId}/unsubscribe:
    delete:
      tags: [Users]
      summary: "Отписаться от пользователя (unfollow)"
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200": { description: "Отписка успешна" }
        "404": { description: "Подписка не найдена" }

  # PUBLICATIONS
  /publications:
    get:
      tags: [Publications]
      summary: "Лента публикаций (feed)"
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
        - in: query
          name: sortBy
          schema: { type: string, enum: [newest, oldest, popular] }
        - in: query
          name: hashtag
          schema: { type: string }
      responses:
        "200": { description: "Лента публикаций", content: { application/json: { schema: { type: array, items: { $ref: "#/components/schemas/Publication" } } } } }
    post:
      tags: [Publications]
      summary: "Создать публикацию (текст/медиа)"
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                content: { type: string }
                publicationMedia: { type: string, format: binary }
      responses:
        "201": { description: "Публикация создана" }
        "400": { description: "Требуется текст или файл" }

  /publications/me/liked:
    get:
      tags: [Publications]
      summary: "Получить публикации, лайкнутые текущим пользователем"
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        "200": { description: "Список лайкнутых публикаций" }

  /publications/{publicationId}:
    get:
      tags: [Publications]
      summary: "Детали публикации по ID"
      parameters:
        - in: path
          name: publicationId
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200": { description: "Данные публикации" }
        "404": { description: "Не найдено" }
    put:
      tags: [Publications]
      summary: "Обновить свою публикацию"
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - in: path
          name: publicationId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content: { type: string }
      responses:
        "200": { description: "Обновлено" }
    delete:
      tags: [Publications]
      summary: "Удалить свою публикацию"
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - in: path
          name: publicationId
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200": { description: "Удалено" }

  /publications/{publicationId}/like:
    post:
      tags: [Publications]
      summary: "Лайкнуть публикацию"
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - in: path
          name: publicationId
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200": { description: "Лайк добавлен" }
        "409": { description: "Уже лайкнули" }

  /publications/{publicationId}/unlike:
    delete:
      tags: [Publications]
      summary: "Убрать лайк"
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - in: path
          name: publicationId
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200": { description: "Лайк удалён" }
        "404": { description: "Вы не лайкали" }

  # COMMENTS (base path: /comments)
  /comments/{publicationId}/comments:
    post:
      tags: [Comments]
      summary: "Создать комментарий для публикации"
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - in: path
          name: publicationId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: ["text"]
              properties:
                text: { type: string }
      responses:
        "200": { description: "Комментарий создан" }
        "400": { description: "Пустой текст" }

  /comments/{publicationId}/comments:
    get:
      tags: [Comments]
      summary: "Получить все комментарии для публикации"
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - in: path
          name: publicationId
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200": { description: "Список комментариев", content: { application/json: { schema: { type: array, items: { $ref: "#/components/schemas/Comment" } } } } }

  /comments/{commentId}/reply:
    post:
      tags: [Comments]
      summary: "Ответить на комментарий"
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - in: path
          name: commentId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: ["text"]
              properties:
                text: { type: string }
      responses:
        "200": { description: "Ответ создан" }

  /comments/{commentId}:
    put:
      tags: [Comments]
      summary: "Обновить комментарий"
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - in: path
          name: commentId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text: { type: string }
      responses:
        "200": { description: "Комментарий обновлён" }

    delete:
      tags: [Comments]
      summary: "Удалить комментарий"
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - in: path
          name: commentId
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200": { description: "Комментарий удалён" }

  /comments/{commentId}/like:
    post:
      tags: [Comments]
      summary: "Поставить лайк комменту"
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - in: path
          name: commentId
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200": { description: "Лайк добавлен" }

  /comments/{commentId}/unlike:
    delete:
      tags: [Comments]
      summary: "Убрать лайк с комментария"
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - in: path
          name: commentId
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200": { description: "Лайк удалён" }

  # GALLERY
  /gallery:
    get:
      tags: [Gallery]
      summary: "Получить элементы собственной галереи"
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - in: query
          name: sortBy
          schema: { type: string, enum: [newest, oldest] }
        - in: query
          name: searchQuery
          schema: { type: string }
        - in: query
          name: date
          schema: { type: string, format: date }
      responses:
        "200": { description: "Элементы галереи", content: { application/json: { schema: { type: array, items: { $ref: "#/components/schemas/GalleryItem" } } } } }

  # AI GENERATION (examples seen in code)
  /fal/post-process:
    post:
      tags: [AI Generation]
      summary: "Fal.ai — post-process (загрузка изображения)"
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                falImage:
                  type: string
                  format: binary
                publish:
                  type: boolean
                  description: "Publish generated asset as publication"
      responses:
        "200": { description: "Изображение обработано/загружено" }

  /fal/process-image:
    post:
      tags: [AI Generation]
      summary: "Fal.ai — процессинг результата (publish/save)"
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                publish: { type: boolean }
                imageUrl: { type: string }
                prompt: { type: string }
      responses:
        "200": { description: "Обработано и сохранено/опубликовано" }

  /gpt/generate:
    post:
      tags: [AI Generation]
      summary: "GPT — генерация изображения (пример)"
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt: { type: string }
                publish: { type: boolean }
      responses:
        "200": { description: "Генерация запущена" }

  /gpt/process-image:
    post:
      tags: [AI Generation]
      summary: "GPT — обработка/публикация уже сгенерированного изображения"
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                imageUrl: { type: string }
                publish: { type: boolean }
      responses:
        "200": { description: "Обработано" }

  # ADMIN
  /admin/login:
    post:
      tags: [Admin]
      summary: "Вход администратора"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string }
                password: { type: string }
      responses:
        "200": { description: "Успешный вход" }
        "401": { description: "Неверные данные" }

  /admin/users:
    get:
      tags: [Admin]
      summary: "Список всех пользователей (только admin)"
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        "200": { description: "Список пользователей" }
        "403": { description: "Нет доступа" }

  /admin/users/{userId}/block:
    put:
      tags: [Admin]
      summary: "Заблокировать/отблокировать пользователя"
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                block: { type: boolean, description: "true = блокировать, false = разблокировать" }
      responses:
        "200": { description: "Операция выполнена" }

# Примечание:
#  - Большинство защищённых маршрутов поддерживают аутентификацию через cookie 'token' (jwt) и/или заголовок Authorization: Bearer <jwt>.
#  - Для multipart-загрузок (avatar, publicationMedia, falImage и т.д.) указан формат multipart/form-data.
#  - UUID использован для идентификаторов пользователей, публикаций и комментариев.
